-- √Årboles binarios üå≥ ("sabor cl√°sico")

data Arbol = Nil | Bin Arbol Arbol 
			 deriving Show 

-- Escribir todos los √°rboles binarios de 0, 1, 2 y 3 nodos.

-- 0Ô∏è‚É£  nodos ‚û° Nil  
-- 1Ô∏è‚É£  nodo  ‚û° Bin Nil Nil 
-- 2Ô∏è‚É£  nodos ‚û° Bin (Bin Nil Nil) Nil || Bin Nil (Bin Nil Nil)
-- 3Ô∏è‚É£  nodos ‚û° 
-- Bin (Bin (Bin Nil Nil) Nil) Nil   || 
-- Bin (Bin Nil (Bin Nil Nil)) Nil   || 
-- Bin (Bin Nil Nil) (Bin Nil Nil)   || 
-- Bin Nil (Bin (Bin Nil Nil) Nil)   ||
-- Bin Nil (Bin Nil (Bin Nil Nil))

-- Funciones sobre √°rboles ‚òÇ
-- Esquema de recursi√≥n estructural para el tipo de datos √°rbol.
-- f :: Arbol -> ...
-- f Nil 			= ...
-- f (Bin izq der) = ... f izq ... f der ...

-- Definir las siguientes funciones:
-- 1.
-- Prop√≥sito:
-- Indica si el √°rbol dado es Nil (vac√≠o).
-- Precondiciones:
-- No tiene (es una funci√≥n total).
--
esNil :: Arbol -> Bool 
esNil Nil = True 
esNil _   = False 

-- 2.
-- Prop√≥sito:
-- Describe el hijo izquierdo del √°rbol dado.
-- Precondiciones:
-- El √°rbol no debe ser Nil.
--
hijoIzq :: Arbol -> Arbol
hijoIzq (Bin izq der) = izq  

-- 3.
-- Prop√≥sito:
-- Describe el hijo derecho del √°rbol dado.
-- Precondiciones:
-- El √°rbol no debe ser Nil.
--
hijoDer :: Arbol -> Arbol  
hijoDer (Bin izq der) = der 

-- 4.
-- Prop√≥sito:
-- Describe la cantidad de nodos del √°rbol dado.
-- Precondiciones:
-- No tiene (es una funci√≥n total)
--
cantidadDeNodos :: Arbol -> Int 
cantidadDeNodos Nil           = 0
cantidadDeNodos (Bin izq der) = 
	1 + cantidadDeNodos izq + cantidadDeNodos der

-- 5.
-- Prop√≥sito:
-- Describe la cantidad de hojas del √°rbol dado.
-- Precondiciones:
-- No tiene (es una funci√≥n total).
-- 
cantidadDeHojas :: Arbol -> Int 
cantidadDeHojas Nil           = 0 
cantidadDeHojas (Bin izq der) = 
	if esHoja (Bin izq der) 
		then 1
		else cantidadDeHojas izq + cantidadDeHojas der 

-- Prop√≥sito:
-- Indica si el √°rbol dado es una hoja.
-- Precondiciones:
-- No tiene (es una funci√≥n total).
--
esHoja :: Arbol -> Bool 
esHoja Nil = False 
esHoja (Bin izq der) = esNil izq && esNil der 

-- 6.
-- Prop√≥sito:
-- Describe la altura del √°rbol dado (rama m√°s larga).
-- Precondiciones:
-- No tiene (es una funci√≥n total). 
-- 
altura :: Arbol -> Int 
altura Nil           = 0 
altura (Bin izq der) = 1 + maximo (altura izq) (altura der)


-- Funci√≥n auxiliar üê±‚Äçüèç

-- Prop√≥sito:
-- Describe el n√∫mero m√°s grande entre los dos dados.
-- Precondiciones:
-- No tiene (es una funci√≥n total). 
-- 
maximo :: Int -> Int -> Int 
maximo x y = 
	if x >= y
	 then x
	 else y 

-----------------------------------------
-- Agencia de esp√≠as üïµüèº‚Äç
-- Las agencias de esp√≠as se estructuran en forma jer√°rquica. Hay dos 
-- tipos de esp√≠as:
-- 1. Los agentes son los esp√≠as que recolectan informaci√≥n de diversas
-- fuentes. Cada agente est√° radicado en una ciudad.
-- 2. Los jefes son los esp√≠as que coordinan la actividad de otros esp√≠as.
-- Cada jefe tiene dos esp√≠as a su cargo y pueden recibir √≥rdenes de su propio
-- jefe (si lo tiene). Observar que un jefe puede tener a otro jefe a su cargo.

-- Todos los esp√≠as se identifican con un c√≥digo num√©rico.
-- Modelaremos la agencia de esp√≠as con los siguientes tipos de datos algebraicos.

type Cod    = Int 

type Ciudad = String

data Agencia = Agente Cod Ciudad 
			 | Jefe Cod Agencia Agencia 
			   deriving Show

-- Por ejemplo:
agencia1 :: Agencia  
agencia1 = Jefe 1 
				(Jefe 2 
					(Jefe 3 
						(Agente 31 "Buenos Aires")
						(Agente 31 "Santiago de Chile"))
					(Jefe 4 
						(Agente 41 "Bruselas")
						(Agente 42 "Washington DC")))
				(Jefe 5 
					(Jefe 6 
						(Agente 61 "Bangkok")
						(Agente 62 "Amsterdam"))
					(Jefe 7 
						(Agente 71 "Bruselas")
						(Agente 72 "Bruselas")))

--			       	  Jefe 1 
-- 				    /        \
--			       /          \
--                /            \
--         Jefe 2             	Jefe 5
--          /  \                  /    \ 
--         /    \                /      \
--   Jefe 3      Jefe 4      Jefe 6      Jefe 7
--   /     \      /   \        / \         /  \
-- Ag 31 Ag 32  Ag 41 Ag 42  Ag 61 Ag 62  Ag 71 Ag 72 
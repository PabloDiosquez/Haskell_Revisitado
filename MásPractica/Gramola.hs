module Gramola where 

import Resumen 

-- Interfaz del Tipo Abstracto Gramola ðŸ¤˜

-- PropÃ³sito   : Crea una nueva gramola.
-- PrecondiciÃ³n: La lista dada no debe ser vacÃ­a. 
-- Complejidad : O(1)
--
nuevaG 	       :: [String] -> Gramola  

-- PropÃ³sito  : Retrocede a la canciÃ³n anterior en la gramola dada. 
-- Complejidad: O(1)
--
anteriorG      :: Gramola -> Gramola 

-- PropÃ³sito  : Avanza a la siguiente canciÃ³n en la gramola dada. 
-- Complejidad: O(1)
--
siguienteG     :: Gramola -> Gramola

-- PropÃ³sito  : Describe el nombre de la canciÃ³n sobre la cual estÃ¡ posicionada actualmente
-- la gramola dada.
-- Complejidad: O(1)
--
cancionG       :: Gramola -> String 

-- PropÃ³sito   : Permite votar por la canciÃ³n actual sobre la cual estÃ¡ posicionada actualmente
-- la gramola dada.
-- PrecondiciÃ³n: El puntaje dado debe estar comprendido entre 1 y 10 inclusive.   
-- Complejidad : O(1)
--
votarG         :: Int -> Gramola -> Gramola

-- PropÃ³sito  :  Describe el puntaje en promedio de la canciÃ³n sobre la cual estÃ¡ posicionada actualmente
-- la gramola dada.
-- Complejidad: O(1)
--
puntajeG   	   :: Gramola -> Int 

-- PropÃ³sito  : Describe el nombre de la canciÃ³n mÃ¡s votada en la gramola dada. Si nunca fue votado, 
-- describe 0.
-- Complejidad: O(1)
--
temaMasVotadoG :: Gramola -> String 

-------------------------------------------------------------------------------------------------
-- ImplementaciÃ³n del tipo abstracto de datos Gramola â˜‚ 

data Gramola = G [(String, Resumen)]	-- canciones anteriores con sus votos (en el orden inverso).
				 String 			    -- canciÃ³n actual. 
				 Resumen 				-- votos del tema actual. 
				 [(String, Resumen)]	-- canciones posteriores con sus votos. 
				 String 				-- tema mÃ¡s votado.
				 Int 					-- cantidad de votos del tema mÃ¡s votado. 

-- INVARIANTE de representaciÃ³n: 
-- El nombre del tema mÃ¡s votado es alguno de los nombres de temas de la gramola y es el que 
-- tiene mayor cantidad de votos.
--
-- El nÃºmero que representa la cantidad de votos del tema mÃ¡s votado debe ser verdaderamente 
-- la cantidad de votos que recibiÃ³ el tema mÃ¡s votado de toda la gramola.
-- 

-- â–ª 
nuevaG (cancion : canciones) = 
	G [] cancion nuevoR (cancionesConResumenesVacios canciones) cancion 0

cancionesConResumenesVacios :: [String] -> [(String, Resumen)]
cancionesConResumenesVacios [] 					  = [] 
cancionesConResumenesVacios (cancion : canciones) = 
	(cancion, nuevoR) : cancionesConResumenesVacios canciones

-- â–ª 
anteriorG (G [] act r sigs tmv ptmv) 				 =
		   G [] act r sigs tmv ptmv
anteriorG (G ((ant, rant):ants) act r sigs tmv ptmv) = 
		   G  ants ant rant ((act, r):sigs) tmv ptmv

-- â–ª
siguienteG (G ants act r [] tmv ptmv) 			  = 
			G ants act r [] tmv ptmv
siguienteG (G ants act r ((s, rs):sigs) tmv ptmv) = 
			G ((act, r) : ants) s rs sigs tmv ptmv   

-- â–ª
cancionG (G _ c _) = c 

-- â–ª 
votarG puntaje (G ants act r sigs tmv ptmv) = 
	if cantidadR r == ptmv
		then G ants act (agregarR puntaje r) act (ptmv + 1)
		else G ants act (agregarR puntaje r) sigs tmv ptmv

-- â–ª 
puntajeG (G ants act r sigs tmv ptmv) = 
	if cantidadR r == 0 
		then 0 
		else promedioR r 

-- â–ª 
temaMasVotadoG (G _ _ _ tmv _) = tmv 